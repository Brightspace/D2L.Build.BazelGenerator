using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using D2L.Build.BazelGenerator.NewBuild;
using D2L.Build.BazelGenerator.OldBuild;

namespace D2L.Build.BazelGenerator.Commands {
	internal sealed class GenerateFrameworkBuildFile {
		private static IEnumerable<INewBuildThing> GetBuildFileContents(
			string targetFramework,
			string referenceAssembliesPathRoot,
			string referenceAssembliesInternalPath
		) {

			// The path to the DLLs inside frameworkPackagePath
			var frameworkContentsPath = Path.Combine(
				referenceAssembliesPathRoot,
				referenceAssembliesInternalPath
			);

			var dlls = Directory.EnumerateFiles(
				frameworkContentsPath,
				"*.dll",
				SearchOption.AllDirectories
			).OrderBy( Path.GetFileNameWithoutExtension );

			ImmutableArray<Label> visibility = ImmutableArray.Create(
				new Label( "net", "", "__pkg__" )
			);

			foreach( var dll in dlls ) {
				yield return FrameworkAssembly
					.LoadFromFile( targetFramework, referenceAssembliesPathRoot, dll )
					.Convert( visibility )
					.Single();
			}
		}

		public static void Run(
			string targetFramework,
			string referenceAssembliesPathRoot,
			string referenceAssembliesInternalPath
		) {
			var buildFile = new Label( targetFramework, "", $"{targetFramework}.BUILD" );

			var imports = GetBuildFileContents(
				targetFramework,
				referenceAssembliesPathRoot,
				referenceAssembliesInternalPath
			);

			var package = new Package(
				buildFile,
				imports.ToImmutableArray(),
				$"This file was generated by { typeof( GenerateFrameworkBuildFile ).FullName }",
				"Don't edit it by hand! You should regenerate this if the .NET package gets updated."

			);

			package.WriteToConsole();
		}
	}
}
